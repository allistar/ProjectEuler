#include <boost/multiprecision/cpp_int.hpp>
#include <iostream>

using boost::multiprecision::cpp_int;

/**
 * 
 * 

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

 */

int main() {
  cpp_int n1 = 1,
    n2 = 1,
    n3,
    sum = 0;
  
  while (true) {
    //work out the new term
    n3 = n1 + n2;
    //if it is > the limit then exit
    if (n2 >= 4000000) {
      break;
    }
    //if it is even, sum it
    if (n3 % 2 == 0) {
      sum += n3;
    }
    //swap values around and continue
    n1 = n2;
    n2 = n3;
  }
  
  std::cout << "Answer: " << sum << "\n";
  
  return 0;
}
