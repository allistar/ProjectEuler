#include <boost/multiprecision/cpp_int.hpp>
#include <iostream>

using boost::multiprecision::cpp_int;
using namespace std;

/**
 *

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 
 * 
 */

int numberOfDivisors(int number) {
  //brute force
  int i,
    divisors = 0,
    limit = number;
  
  for (i=1;i<=limit;i++) {
    if (number % i == 0) {
      limit = number/i;
      if (limit != i) {
	divisors++;
      }
      divisors++;
    }
  }
  return divisors;
}

int main() {
  int i = 1,
    triangle = 0,
    divisors;
  
  while (true) {
    //work out the trangle number for this "i"
    triangle += i;
    
    //get the number of divisors for this number
    divisors = numberOfDivisors(triangle);
    if (divisors > 500) {
      break;
    }
    
    i++;
  }

  cout << "Answer: " << triangle << "\n";
  return 0;
}
