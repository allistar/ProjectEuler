#include <boost/multiprecision/cpp_int.hpp>
#include <iostream>

using boost::multiprecision::cpp_int;
using namespace std;

/**
 * 

Consider all integer combinations of ab for 2 ? a ? 5 and 2 ? b ? 5:

    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?

 * 
 */

int main() {
  cpp_int n;
  int a, b, size = 0, i;
  cpp_int answers[100*100];
  
  for (a=2;a<=100;a++) {
    for (b=2;b<=100;b++) {
      n = boost::multiprecision::pow(cpp_int(a), b);
      //have we seen this power before?
      for (i=0;i<size;i++) {
	if (answers[i] == n) {
	  i = -1;
	  break;
	}
      }
      if (i != -1) {
	//we didn't find it
	answers[size++] = n;
      }
    }
  }

  printf("Answer: %i\n", size);
  return 0;
}
